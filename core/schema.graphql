### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Account {
  currency: Account_currency!
  id: Int!
  name: String!
}

enum Account_currency {
  BTC
  EUR
  GBP
  GOLD
  PLN
  USD
}

input AccountCreateInput {
  currency: Account_currency!
  name: String!
  Transaction: TransactionCreateManyWithoutAccountInput
}

input AccountCreateOneWithoutTransactionInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTransactionInput
}

input AccountCreateWithoutTransactionInput {
  currency: Account_currency!
  name: String!
}

input AccountUpdateInput {
  currency: Account_currency
  id: Int
  name: String
  Transaction: TransactionUpdateManyWithoutAccountInput
}

input AccountUpdateManyMutationInput {
  currency: Account_currency
  id: Int
  name: String
}

input AccountUpdateOneRequiredWithoutTransactionInput {
  connect: AccountWhereUniqueInput
  create: AccountCreateWithoutTransactionInput
  update: AccountUpdateWithoutTransactionDataInput
  upsert: AccountUpsertWithoutTransactionInput
}

input AccountUpdateWithoutTransactionDataInput {
  currency: Account_currency
  id: Int
  name: String
}

input AccountUpsertWithoutTransactionInput {
  create: AccountCreateWithoutTransactionInput!
  update: AccountUpdateWithoutTransactionDataInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  currency: Account_currency
  id: IntFilter
  name: StringFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  Transaction: TransactionFilter
}

input AccountWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Int!
}

type Category {
  color: String
  id: Int!
  name: String
  parentId: Int
}

input CategoryCreateInput {
  Category: CategoryCreateOneWithoutOther_CategoryInput
  color: String
  name: String
  other_Category: CategoryCreateManyWithoutCategoryInput
  Transaction: TransactionCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutCategoryInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutCategoryInput!]
}

input CategoryCreateOneWithoutOther_CategoryInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutOther_CategoryInput
}

input CategoryCreateOneWithoutTransactionInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTransactionInput
}

input CategoryCreateWithoutCategoryInput {
  color: String
  name: String
  other_Category: CategoryCreateManyWithoutCategoryInput
  Transaction: TransactionCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutOther_CategoryInput {
  Category: CategoryCreateOneWithoutOther_CategoryInput
  color: String
  name: String
  Transaction: TransactionCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutTransactionInput {
  Category: CategoryCreateOneWithoutOther_CategoryInput
  color: String
  name: String
  other_Category: CategoryCreateManyWithoutCategoryInput
}

input CategoryFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  color: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  other_Category: CategoryFilter
  parentId: NullableIntFilter
  Transaction: TransactionFilter
}

input CategoryUpdateInput {
  Category: CategoryUpdateOneWithoutOther_CategoryInput
  color: String
  id: Int
  name: String
  other_Category: CategoryUpdateManyWithoutCategoryInput
  Transaction: TransactionUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  color: String
  id: Int
  name: String
}

input CategoryUpdateManyMutationInput {
  color: String
  id: Int
  name: String
}

input CategoryUpdateManyWithoutCategoryInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutCategoryInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateOneWithoutOther_CategoryInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutOther_CategoryInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutOther_CategoryDataInput
  upsert: CategoryUpsertWithoutOther_CategoryInput
}

input CategoryUpdateOneWithoutTransactionInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTransactionInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutTransactionDataInput
  upsert: CategoryUpsertWithoutTransactionInput
}

input CategoryUpdateWithoutCategoryDataInput {
  color: String
  id: Int
  name: String
  other_Category: CategoryUpdateManyWithoutCategoryInput
  Transaction: TransactionUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutOther_CategoryDataInput {
  Category: CategoryUpdateOneWithoutOther_CategoryInput
  color: String
  id: Int
  name: String
  Transaction: TransactionUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutTransactionDataInput {
  Category: CategoryUpdateOneWithoutOther_CategoryInput
  color: String
  id: Int
  name: String
  other_Category: CategoryUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithWhereUniqueWithoutCategoryInput {
  data: CategoryUpdateWithoutCategoryDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithoutOther_CategoryInput {
  create: CategoryCreateWithoutOther_CategoryInput!
  update: CategoryUpdateWithoutOther_CategoryDataInput!
}

input CategoryUpsertWithoutTransactionInput {
  create: CategoryCreateWithoutTransactionInput!
  update: CategoryUpdateWithoutTransactionDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutCategoryInput {
  create: CategoryCreateWithoutCategoryInput!
  update: CategoryUpdateWithoutCategoryDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  Category: CategoryWhereInput
  color: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  other_Category: CategoryFilter
  parentId: NullableIntFilter
  Transaction: TransactionFilter
}

input CategoryWhereUniqueInput {
  id: Int
}

"""Possible Currencies"""
enum Currency {
  BTC
  EUR
  GBP
  GOLD
  PLN
  USD
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  deleteManyAccount(where: AccountWhereInput): BatchPayload!
  deleteManyCategory(where: CategoryWhereInput): BatchPayload!
  deleteManyTransaction(where: TransactionWhereInput): BatchPayload!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneTransaction(where: TransactionWhereUniqueInput!): Transaction
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyTransaction(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  upsertOneAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneTransaction(create: TransactionCreateInput!, update: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int, skip: Int): [Account!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, skip: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  currencies: [Currency!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int, skip: Int, where: TransactionWhereInput): [Transaction!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Transaction {
  Account: Account!
  accountId: Int!
  Category: Category
  categoryId: Int
  date: String!
  description: String
  id: Int!
  name: String
  value: Float!
}

input TransactionCreateInput {
  Account: AccountCreateOneWithoutTransactionInput!
  Category: CategoryCreateOneWithoutTransactionInput
  date: DateTime!
  description: String
  name: String
  value: Float!
}

input TransactionCreateManyWithoutAccountInput {
  connect: [TransactionWhereUniqueInput!]
  create: [TransactionCreateWithoutAccountInput!]
}

input TransactionCreateManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  create: [TransactionCreateWithoutCategoryInput!]
}

input TransactionCreateWithoutAccountInput {
  Category: CategoryCreateOneWithoutTransactionInput
  date: DateTime!
  description: String
  name: String
  value: Float!
}

input TransactionCreateWithoutCategoryInput {
  Account: AccountCreateOneWithoutTransactionInput!
  date: DateTime!
  description: String
  name: String
  value: Float!
}

input TransactionFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionScalarWhereInput {
  accountId: IntFilter
  AND: [TransactionScalarWhereInput!]
  categoryId: NullableIntFilter
  date: DateTimeFilter
  description: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  value: FloatFilter
}

input TransactionUpdateInput {
  Account: AccountUpdateOneRequiredWithoutTransactionInput
  Category: CategoryUpdateOneWithoutTransactionInput
  date: DateTime
  description: String
  id: Int
  name: String
  value: Float
}

input TransactionUpdateManyDataInput {
  date: DateTime
  description: String
  id: Int
  name: String
  value: Float
}

input TransactionUpdateManyMutationInput {
  date: DateTime
  description: String
  id: Int
  name: String
  value: Float
}

input TransactionUpdateManyWithoutAccountInput {
  connect: [TransactionWhereUniqueInput!]
  create: [TransactionCreateWithoutAccountInput!]
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutAccountInput!]
}

input TransactionUpdateManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  data: TransactionUpdateManyDataInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateWithoutAccountDataInput {
  Category: CategoryUpdateOneWithoutTransactionInput
  date: DateTime
  description: String
  id: Int
  name: String
  value: Float
}

input TransactionUpdateWithoutCategoryDataInput {
  Account: AccountUpdateOneRequiredWithoutTransactionInput
  date: DateTime
  description: String
  id: Int
  name: String
  value: Float
}

input TransactionUpdateWithWhereUniqueWithoutAccountInput {
  data: TransactionUpdateWithoutAccountDataInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutCategoryInput {
  data: TransactionUpdateWithoutCategoryDataInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutAccountInput {
  create: TransactionCreateWithoutAccountInput!
  update: TransactionUpdateWithoutAccountDataInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  update: TransactionUpdateWithoutCategoryDataInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  Account: AccountWhereInput
  accountId: IntFilter
  AND: [TransactionWhereInput!]
  Category: CategoryWhereInput
  categoryId: NullableIntFilter
  date: DateTimeFilter
  description: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  value: FloatFilter
}

input TransactionWhereUniqueInput {
  id: Int
}
